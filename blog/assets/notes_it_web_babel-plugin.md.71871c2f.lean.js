import{_ as a,g as l,f as p,z as n,h as s}from"./app.2824fd48.js";const m=JSON.parse('{"title":"利用babel给所有的async函数添加try/catch","description":"","frontmatter":{},"headers":[{"level":2,"title":"async如果不加 try/catch 会发生什么事？","slug":"async如果不加-try-catch-会发生什么事","link":"#async如果不加-try-catch-会发生什么事","children":[]},{"level":2,"title":"babel插件的最终效果","slug":"babel插件的最终效果","link":"#babel插件的最终效果","children":[]},{"level":2,"title":"babel插件的实现思路","slug":"babel插件的实现思路","link":"#babel插件的实现思路","children":[]},{"level":2,"title":"babel的核心：AST","slug":"babel的核心-ast","link":"#babel的核心-ast","children":[{"level":3,"title":"词法分析","slug":"词法分析","link":"#词法分析","children":[]},{"level":3,"title":"语法分析","slug":"语法分析","link":"#语法分析","children":[]}]},{"level":2,"title":"常用的 AST 节点类型对照表","slug":"常用的-ast-节点类型对照表","link":"#常用的-ast-节点类型对照表","children":[]},{"level":2,"title":"await节点对应的AST结构","slug":"await节点对应的ast结构","link":"#await节点对应的ast结构","children":[{"level":3,"title":"原始代码","slug":"原始代码","link":"#原始代码","children":[]},{"level":3,"title":"增加try catch后的代码","slug":"增加try-catch后的代码","link":"#增加try-catch后的代码","children":[]}]},{"level":2,"title":"babel插件开发","slug":"babel插件开发","link":"#babel插件开发","children":[{"level":3,"title":"插件的基本格式示例","slug":"插件的基本格式示例","link":"#插件的基本格式示例","children":[]},{"level":3,"title":"寻找await节点","slug":"寻找await节点","link":"#寻找await节点","children":[]},{"level":3,"title":"向上查找 async 函数","slug":"向上查找-async-函数","link":"#向上查找-async-函数","children":[]},{"level":3,"title":"利用babel-template生成try/catch节点","slug":"利用babel-template生成try-catch节点","link":"#利用babel-template生成try-catch节点","children":[]},{"level":3,"title":"async函数体替换成try语句","slug":"async函数体替换成try语句","link":"#async函数体替换成try语句","children":[]},{"level":3,"title":"若函数已存在try/catch，则不处理","slug":"若函数已存在try-catch-则不处理","link":"#若函数已存在try-catch-则不处理","children":[]},{"level":3,"title":"添加报错信息","slug":"添加报错信息","link":"#添加报错信息","children":[]},{"level":3,"title":"添加用户选项","slug":"添加用户选项","link":"#添加用户选项","children":[]},{"level":3,"title":"最终代码","slug":"最终代码","link":"#最终代码","children":[]}]},{"level":2,"title":"工具","slug":"工具","link":"#工具","children":[]}],"relativePath":"notes/it/web/babel-plugin.md","lastUpdated":1678938501000}'),o={name:"notes/it/web/babel-plugin.md"},e=n("",30),t=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"类型原名称"),s("th",null,"中文名称"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"Program"),s("td",null,"程序主体"),s("td",null,"整段代码的主体")]),s("tr",null,[s("td",null,"VariableDeclaration"),s("td",null,"变量声明"),s("td",null,"声明一个变量，例如 var let const")]),s("tr",null,[s("td",null,"FunctionDeclaration"),s("td",null,"函数声明"),s("td",null,"声明一个函数，例如 function")]),s("tr",null,[s("td",null,"ExpressionStatement"),s("td",null,"表达式语句"),s("td",null,"通常是调用一个函数，例如 console.log()")]),s("tr",{var:"",a:""},[s("td",null,"BlockStatement"),s("td",null,"块语句"),s("td",null,"包裹在 {} 块内的代码，例如 if (condition)")]),s("tr",null,[s("td",null,"BreakStatement"),s("td",null,"中断语句"),s("td",null,"通常指 break")]),s("tr",null,[s("td",null,"ContinueStatement"),s("td",null,"持续语句"),s("td",null,"通常指 continue")]),s("tr",null,[s("td",null,"ReturnStatement"),s("td",null,"返回语句"),s("td",null,"通常指 return")]),s("tr",null,[s("td",null,"SwitchStatement"),s("td",null,"Switch 语句"),s("td",null,"通常指 Switch Case 语句中的 Switch")]),s("tr",null,[s("td",null,"IfStatement"),s("td",null,"If 控制流语句"),s("td",null,"控制流语句，通常指 if(condition){}else{}")]),s("tr",null,[s("td",null,"Identifier"),s("td",null,"标识符"),s("td",null,"标识，例如声明变量时 var identi = 5 中的 identi")]),s("tr",null,[s("td",null,"CallExpression"),s("td",null,"调用表达式"),s("td",null,"通常指调用一个函数，例如 console.log()")]),s("tr",null,[s("td",null,"BinaryExpression"),s("td",null,"二进制表达式"),s("td",null,"通常指运算，例如 1+2")]),s("tr",null,[s("td",null,"MemberExpression"),s("td",null,"成员表达式"),s("td",null,"通常指调用对象的成员，例如 console 对象的 log 成员")]),s("tr",null,[s("td",null,"ArrayExpression"),s("td",null,"数组表达式"),s("td",null,"通常指一个数组，例如 [1, 3, 5]")]),s("tr",null,[s("td",null,"FunctionExpression"),s("td",null,"函数表达式"),s("td",null,"例如const func = function () {}")]),s("tr",null,[s("td",null,"ArrowFunctionExpression"),s("td",null,"箭头函数表达式"),s("td",null,"例如const func = ()=> {}")]),s("tr",null,[s("td",null,"AwaitExpressiona"),s("td",null,"wait表达式"),s("td",null,"例如let val = await f()")]),s("tr",null,[s("td",null,"ObjectMethod"),s("td",null,"对象中定义的方法"),s("td",null,"例如 let obj = { fn ()")]),s("tr",null,[s("td",null,"NewExpression"),s("td",null,"New 表达式"),s("td",null,"通常指使用 New 关键词")]),s("tr",null,[s("td",null,"AssignmentExpression"),s("td",null,"赋值表达式"),s("td",null,"通常指将函数的返回值赋值给变量")]),s("tr",null,[s("td",null,"UpdateExpression"),s("td",null,"更新表达式"),s("td",null,"通常指更新成员值，例如 i++")]),s("tr",null,[s("td",null,"Literal"),s("td",null,"字面量"),s("td",null,"字面量")]),s("tr",null,[s("td",null,"BooleanLiteral"),s("td",null,"布尔型字面量"),s("td",null,"布尔值，例如 true false")]),s("tr",null,[s("td",null,"NumericLiteral"),s("td",null,"数字型字面量"),s("td",null,"数字，例如 100")]),s("tr",null,[s("td",null,"StringLiteral"),s("td",null,"字符型字面量"),s("td",null,"字符串，例如 vansenb")]),s("tr",null,[s("td",null,"SwitchCase"),s("td",null,"Case 语句"),s("td",null,"通常指 Switch 语句中的 Case")])])],-1),c=n("",52),r=[e,t,c];function D(F,y,i,C,A,u){return p(),l("div",null,r)}const d=a(o,[["render",D]]);export{m as __pageData,d as default};
