import{_ as s,c as e,o as a,V as n}from"./chunks/framework.c277a2d0.js";const D=JSON.parse('{"title":"打包 JavaScript 库的现代化指南","description":"","frontmatter":{},"headers":[],"relativePath":"notes/it/web/Develop/打包JavaScript库的现代化指南.md","filePath":"notes/it/web/Develop/打包JavaScript库的现代化指南.md","lastUpdated":1687793693000}'),o={name:"notes/it/web/Develop/打包JavaScript库的现代化指南.md"},p=n(`<h1 id="打包-javascript-库的现代化指南" tabindex="-1">打包 JavaScript 库的现代化指南 <a class="header-anchor" href="#打包-javascript-库的现代化指南" aria-label="Permalink to &quot;打包 JavaScript 库的现代化指南&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>本指南旨在提供一些大多数库都应该遵循的一目了然的建议。以及一些额外的信息，用来帮助你了解这些建议被提出的原因，或帮助你判断是否不需要遵循某些建议。这个指南仅适用于 <strong>库（libraries）</strong>，不适用于应用（app）。</p><p>要强调的是，这只是一些<strong>建议</strong>，并不是所有库都必须要遵循的。每个库都是独特的，它们可能有充足的理由不采用本文中的任何建议。</p><p>最后，这个指南不针对某一个特定的打包工具 —— 已经有许多指南来说明如何在配置特定的打包工具。相反我们聚焦于每个库和打包工具（或不用打包工具）都适用的事项。</p><h2 id="输出-esm、cjs-和-umd-格式" tabindex="-1">输出 <code>esm</code>、<code>cjs</code> 和 <code>umd</code> 格式 <a class="header-anchor" href="#输出-esm、cjs-和-umd-格式" aria-label="Permalink to &quot;输出 \`esm\`、\`cjs\` 和 \`umd\` 格式&quot;">​</a></h2><details><summary>支持全部的生态</summary><p><code>esm</code> 是“EcmaScript module”的缩写。</p><p><code>cjs</code> 是“CommonJS module”的缩写。</p><p><code>umd</code> 是“Universal Module Definition”的缩写，它可以在 <code>&lt;script&gt;</code> 标签中执行、被 <code>CommonJS</code> 模块加载器加载、被 <code>AMD</code> 模块加载器加载。</p><p><code>esm</code> 被认为是“未来”，但 <code>cjs</code> 仍然在社区和生态系统中占有重要地位。<code>esm</code> 对打包工具来说更容易正确地进行 treeshaking，因此对于库来说，拥有这种格式很重要。或许在将来的某一天，你的库只需要输出 <code>esm</code>。</p><p>你可能已经注意到，<code>umd</code> 已经与 CommonJS 模块加载器兼容 —— 所以为什么还要同时具备 <code>cjs</code> 和 <code>umd</code> 输出呢？一个原因是，与 <code>umd</code> 文件相比，CommonJS 文件在对依赖进行条件导入时通常表现更好；例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">module.exports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-lib.production.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">module.exports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-lib.development.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的例子，当使用 CommonJS 模块时，只会引入 <code>production</code> 或 <code>development</code> 包中的一个。但是，对于 UMD 模块，最终可能会将两个包全部引入。有关更多信息，请参阅<a href="https://github.com/frehner/modern-guide-to-packaging-js-library/issues/9" target="_blank" rel="noreferrer">此讨论</a>。</p><p>最后还需要注意是，开发者可能会在其应用中同时使用 <code>cjs</code> 和 <code>esm</code>，发生双包危险。<a href="https://nodejs.org/api/packages.html#dual-package-hazard" target="_blank" rel="noreferrer">dual package hazard</a> 一文介绍了一些缓解该问题的方法，利用 <a href="#定义你的-exports"><code>package.json#exports</code></a> 进行 package exports 也可以帮助防止这种情况的发生。</p></details><h2 id="输出多文件" tabindex="-1">输出多文件 <a class="header-anchor" href="#输出多文件" aria-label="Permalink to &quot;输出多文件&quot;">​</a></h2><details><summary>通过保留文件结构更好地支持 treeshaking</summary><p>如果你对你的库使用了打包工具或编译器，可以对其进行配置以保留源文件目录结构。这样可以更容易地对特定文件进行 <a href="#列出-sideeffects">side effects</a> 标记，有助于开发者的打包工具进行 threeshaking。参考<a href="https://levelup.gitconnected.com/code-splitting-for-libraries-bundling-for-npm-with-rollup-1-0-2522c7437697" target="_blank" rel="noreferrer">这篇文章</a>了解更多信息。</p><p>一个例外是，如果你要创建一个不依赖任何打包工具可以直接在浏览器中使用的产出（通常是 <code>umd</code> 格式，但也可能是现代的 <code>esm</code> 格式）。在这种情况下，最好让浏览器请求一个大文件，而不是请求多个小文件。此外，你应该进行<a href="#要不要压缩代码">代码压缩</a>并为其创建 <a href="#创建-sourcemap">sourcemap</a>。</p></details><h2 id="要不要压缩代码" tabindex="-1">要不要压缩代码 <a class="header-anchor" href="#要不要压缩代码" aria-label="Permalink to &quot;要不要压缩代码&quot;">​</a></h2><details><summary>确定你期望的代码压缩程度</summary><p>你可以将一些层面的代码压缩应用到你的库中，这取决于你对你的代码最终通过开发者的打包工具后的大小的追求程度。</p><p>例如，大多数编译器已经配置了删除空白符等其他简单的优化，即使是来自 NPM 模块的代码（在这里指的是你的库）。使用 <a href="https://github.com/terser/terser#terser-fast-minify-mode" target="_blank" rel="noreferrer">terser</a> —— 一个流行的 JavaScript 代码压缩工具 —— 这类压缩工具可以将包的最终大小减少 95%。在某些情况下，你可能会对这些优化感到满意，且不需要你来付出任何努力。</p><p>但如果在发布前对你的库进行代码压缩，这可以得到一些额外的好处，但需要深入了解压缩工具的配置和副作用。压缩工具通常不会将这类压缩用于 NPM 模块，因此，如果你不自己来做的话，你会错过这些节省。请参阅<a href="https://github.com/frehner/modern-guide-to-packaging-js-library/issues/9" target="_blank" rel="noreferrer">这个 issue</a>了解更多信息。</p><p>最后，如果你正创建一个不依赖任何打包工具可以直接在浏览器中使用的产出（通常是 <code>umd</code> 格式，但也可以是现代的 <code>esm</code> 格式）。在这种情况下，你应该对代码进行压缩，并创建 <a href="#创建-sourcemap">sourcemap</a>，并输出到一个<a href="#输出多文件">单文件</a>。</p></details><h2 id="创建-sourcemap" tabindex="-1">创建 sourcemap <a class="header-anchor" href="#创建-sourcemap" aria-label="Permalink to &quot;创建 sourcemap&quot;">​</a></h2><details><summary>当使用打包工具或编译器时，生成 sourcemap</summary><p>对源代码进行任何形式的编译，都将导致未来某个异常的位置，无法与源码对应起来。为了帮助未来的自己，创建 sourcemap，即使只进行了很少的编译工作。</p></details><h2 id="创建-typescript-类型" tabindex="-1">创建 TypeScript 类型 <a class="header-anchor" href="#创建-typescript-类型" aria-label="Permalink to &quot;创建 TypeScript 类型&quot;">​</a></h2><details><summary>类型提升开发体验</summary><p>随着使用 TypeScript 的开发者数量不断增长，将类型内置到你的库中将有助于改善开发体验 (DX)。此外，不使用 TypeScript 的开发者在使用支持类型的编辑器（例如 VSCode，它使用类型来支持其 <a href="https://code.visualstudio.com/docs/" target="_blank" rel="noreferrer">Intellisense 功能</a>）时也会获得更好的 DX。</p><p>但是，创建类型并不意味着你必须使用 TypeScript 来编写你的库。</p><p>一种选择是继续在源代码中使用 JavaScript，然后通过 <a href="https://jsdoc.app/" target="_blank" rel="noreferrer">JSDoc</a> 注释来支持类型。然后，你可以将 TypeScript 配置为仅从你的 JavaScript 源代码中<a href="https://www.typescriptlang.org/tsconfig/#emitDeclarationOnly" target="_blank" rel="noreferrer">构建类型文件</a>。</p><p>另一种选择是直接在 <code>index.d.ts</code> 文件中编写 TypeScript 类型文件。</p><p>获得类型文件后，请确保设置了 <a href="#定义你的-exports"><code>package.json#exports</code></a> 和 <a href="#设置-types-字段"><code>package.json#types</code></a> 字段.</p></details><h2 id="外置框架" tabindex="-1">外置框架 <a class="header-anchor" href="#外置框架" aria-label="Permalink to &quot;外置框架&quot;">​</a></h2><details><summary>不要将 React、Vue 等框架打包在你的库中</summary><p>当构建的库依赖某个框架（例如 React、Vue 等），或是作为另一个库的插件，你可能需要将框架配置到“externals”中。这可以使你的库引用这个框架，但不会将其打包到最终的产出中。这会避免产生一些 bug，并减少库的体积。</p><p>你应该还需要将框架添加到库的 <code>package.json</code> 的 <a href="#列出-peerdependencies">peer dependencies</a> 中，这将帮助开发者发现你依赖于某个框架。</p></details><h2 id="面向现代浏览器" tabindex="-1">面向现代浏览器 <a class="header-anchor" href="#面向现代浏览器" aria-label="Permalink to &quot;面向现代浏览器&quot;">​</a></h2><details><summary>使用现代的新特性，如果有需要，让开发者支持旧的浏览器</summary><p><a href="https://web.dev/publish-modern-javascript/" target="_blank" rel="noreferrer">这篇 web.dev 上的文章</a>提供了一个很好的案例，并提供了相关的指导原则：</p><ul><li>当使用你的库时，能够让开发者去支持老版本的浏览器。</li><li>输出多个产出来支持不同版本的浏览器。</li></ul><p>举个例子，如果你使用 TypeScript，你可以创建两个版本的包代码：</p><ol><li>通过在 <code>tsconfig.json</code> 中设置 <code>&quot;target&quot;=&quot;esnext&quot;</code>，生成一个用现代 JavaScript 的 <code>esm</code> 版本</li><li>通过在 <code>tsconfig.json</code> 中设置 <code>&quot;target&quot;=&quot;es5&quot;</code> 生成一个兼容低版本 JavaScript 的 <code>umd</code> 版本</li></ol><p>有了这些设置，大多数用户将获得现代版本的代码，但那些使用老的打包工具配置或使用 <code>&lt;script&gt;</code> 加载代码的用户，将获得进行了额外编译来支持老版本浏览器的版本。</p></details><h2 id="必要的编译" tabindex="-1">必要的编译 <a class="header-anchor" href="#必要的编译" aria-label="Permalink to &quot;必要的编译&quot;">​</a></h2><details><summary>编译 TypeScript、将 JSX 转换为函数调用</summary><p>如果库的源码是需要进行编译的形式，如 TypeScript、React 或 Vue 组件等，那么你库需要输出的是编译后的代码。</p><p>例如：</p><ul><li>你的 TypeScript 代码应该输出为 JavaScript。</li><li>你的 React 组件，例如 <code>&lt;Example /&gt;</code>，应该在输出中使用 <code>jsx()</code> 或 <code>createElement()</code> 来替换 JSX 语法。</li></ul><p>进行这样的编译时，请确保同时也<a href="#创建-sourcemap">创建 sourcemap</a></p></details><h2 id="维护-changelog" tabindex="-1">维护 changelog <a class="header-anchor" href="#维护-changelog" aria-label="Permalink to &quot;维护 changelog&quot;">​</a></h2><details><summary>记录更新和变更</summary><p>只要能让开发者了解到有哪些变更和对他们的影响，至于是通过自动化工具还是通过亲自动手的方式来处理，这都无关紧要。理想情况下，库的每次<a href="#设置-version-字段">版本</a>变更都应该在 changelog 中进行相应的更新。</p></details><h2 id="拆分出你的-css-文件" tabindex="-1">拆分出你的 CSS 文件 <a class="header-anchor" href="#拆分出你的-css-文件" aria-label="Permalink to &quot;拆分出你的 CSS 文件&quot;">​</a></h2><details><summary>让开发者能够按需引入 CSS</summary><p>如果你正在创建一个 CSS 库（如 Bootstrap、Tailwind 等），最简单的方式就是提供单一文件，包含库的所有功能。然而，在这种情况下，你的 CSS 产出最终可能会变得很大，影响开发者网站的性能。为了避免这种情况，库通常会提供自定义生成 CSS 产出的功能，让产出中只包含开发者正在使用的必要 CSS（例如，参考 <a href="https://getbootstrap.com/docs/5.2/customize/optimize/" target="_blank" rel="noreferrer">Bootstrap</a> 和 <a href="https://tailwindcss.com/docs/optimizing-for-production" target="_blank" rel="noreferrer">Tailwind</a> 是怎么做的）。</p><p>如果 CSS 只是你的库的一部分（例如，具有默认样式的组件库），那么最好将 CSS 按组件分离单独构建产出，在使用相应的组件时按需导入。这方面的一个例子是 <a href="https://github.com/react-component/slider#usage" target="_blank" rel="noreferrer">react-component</a>。</p></details><h2 id="配置-package-json" tabindex="-1">配置 <code>package.json</code> <a class="header-anchor" href="#配置-package-json" aria-label="Permalink to &quot;配置 \`package.json\`&quot;">​</a></h2><p><code>package.json</code> 中有许多重要的配置字段值得讨论；我在这里将着重讨论其中最为重要的一些，这还有很多<a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" target="_blank" rel="noreferrer">额外的字段</a>，你同样可以进行配置。</p><h3 id="设置-name-字段" tabindex="-1">设置 <code>name</code> 字段 <a class="header-anchor" href="#设置-name-字段" aria-label="Permalink to &quot;设置 \`name\` 字段&quot;">​</a></h3><details><summary>给你的库取一个名字</summary><p><code>name</code> 字段将决定你的包在 <code>npm</code> 上的名字，开发者可以通过这个名字去安装并使用你的库。</p><p>注意，库的命名是有限制的，如果你的代码库属于某个组织，你还可以创建一个命名空间。更多细节可以参考 <a href="https://docs.npmjs.com/cli/v8/configuring-npm/" target="_blank" rel="noreferrer">name docs on npm</a>。</p><p><code>name</code> 和 <a href="#设置-version-字段">version</a> 的组合为库每次迭代创建一个唯一标识。</p></details><h3 id="设置-version-字段" tabindex="-1">设置 <code>version</code> 字段 <a class="header-anchor" href="#设置-version-字段" aria-label="Permalink to &quot;设置 \`version\` 字段&quot;">​</a></h3><details><summary>通过更改 version 来对你的库发布更新</summary><p>正如 <a href="#设置-name-字段">name</a> 部分所说，<code>name</code> 和 <code>version</code> 的组合为你的库在 npm 上创建一个唯一标识。当你更新库中的代码时，你可以更新 <code>version</code> 字段并发布以允许开发者获取该新代码。</p><p>推荐使用 <a href="https://semver.org/" target="_blank" rel="noreferrer">semver</a> 版本控制策略，但要注意的是有些库选择 <a href="https://calver.org/" target="_blank" rel="noreferrer">calver</a> 或使用他们自己特有的版本控制策略。无论你选择使用哪种策略，都应该记录下来，以便开发者了解你的库是如何进行版本控制的。</p><p>你还应该在 <a href="#维护-changelog">changelog</a> 中记录你的更改。</p></details><h3 id="定义你的-exports" tabindex="-1">定义你的 <code>exports</code> <a class="header-anchor" href="#定义你的-exports" aria-label="Permalink to &quot;定义你的 \`exports\`&quot;">​</a></h3><details><summary><code>exports</code> 为你的库定义公共 API</summary><p><code>package.json</code> 中的 <code>exports</code> 字段 - 有时被称为“package exports” - 是一个非常有用的补充，尽管它确实引入了一些复杂性。它做的最重要的两件事是：</p><ol><li><p>定义哪些东西可以从你的库中导入，哪些则不可以，以及可导入的内容的名字。如果没有在 <code>exports</code> 中被列出，那么开发者就不可以 <code>import</code> 或 <code>require</code> 它们。换句话说，<code>exports</code> 的表现像是给你的库用户查看的公共 API，帮助定义哪些是外部的哪些是内部的。</p></li><li><p>允许你根据不同的条件（你可以定义）去选择那个文件是被导入的，例如“文件是被 <code>import</code> 还是被 <code>require</code>？开发人员需要的是 <code>development</code> 版本的库还是 <code>production</code> 版本等等。</p></li></ol><p>关于这部分的内容<a href="https://nodejs.org/api/packages.html#package-entry-points" target="_blank" rel="noreferrer">NodeJS 团队</a>和<a href="https://webpack.js.org/guides/package-exports/" target="_blank" rel="noreferrer">Webpack 团队</a>提供了一些很优秀的文档。在此我列出一个涵盖大部分常见场景的例子：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.d.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">import</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">require</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.cjs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">./package.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./package.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>让我们深入了解这些字段的含义以及我选择这个例子的原因：</p><ul><li><code>&quot;.&quot;</code> 表示你的库的默认入口</li><li>解析过程是<strong>从上往下</strong>的，并在找到匹配的字段后立即停止；所以入口的顺序是非常重要的</li><li><code>types</code> 字段应始终<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-7/#package-json-exports-imports-and-self-referencing" target="_blank" rel="noreferrer">放在第一位</a>，帮助 TypeScript 查找类型文件</li><li><code>module</code> 是一个“非官方”字段，它被 Webpack 和 Rollup 等打包工具所支持。它应该被放在 <code>import</code> 和 <code>require</code> 之前，并且指向 <code>esm</code> 格式的产出 -- 如果你的源代码是纯 <code>esm</code> 的，它也可以指向你的源代码。正如在<a href="#输出-esmcjs-和-umd-格式">格式部分</a>中指出的那样，它旨在帮助打包工具只包含你的库的一个副本，无论它是通过 <code>import</code> 还是 <code>require</code> 方式引入的。你可以从<a href="https://github.com/webpack/webpack/issues/11014#issuecomment-641550630" target="_blank" rel="noreferrer">这里</a>、<a href="https://github.com/webpack/webpack/issues/11014#issuecomment-643256943" target="_blank" rel="noreferrer">这里</a>、还有 <a href="https://github.com/rollup/plugins/pull/540#issuecomment-692078443" target="_blank" rel="noreferrer">这里</a>了解更多关于 <code>module</code> 的内容</li><li><code>import</code> 用于当有人通过 <code>import</code> 使用你的库时</li><li><code>require</code> 用于当有人通过 <code>require</code> 使用你的库时</li><li><code>default</code> 字段用于兜底，在没有任何条件匹配时使用。虽然目前可能并不会匹配到它，但为了面对<a href="https://webpack.js.org/guides/package-exports/#common-patterns" target="_blank" rel="noreferrer">“未知的未来场景”</a>，使用它是好的</li></ul><p>当一个打包工具或者运行时支持 <code>exports</code> 字段的时候，那么 <code>package.json</code> 中的顶级字段 <a href="#设置-main-字段">main</a>、<a href="#设置-types-字段">types</a>、<a href="#设置-module-字段">module</a> 还有 <a href="#设置-browser-字段">browser</a> 将被忽略，被 <code>exports</code> 取代。但是，对于尚不支持 <code>exports</code> 字段的工具或运行时来说，设置这些字段仍然很重要。</p><p>如果你有一个 &quot;development&quot; 和一个 &quot;production&quot; 的产出（例如，你有一些警告在 development 产出中有但在 production 产出中没有），那么你可以通过在 <code>exports</code> 字段中 <code>&quot;development&quot;</code> 和 <code>&quot;production&quot;</code> 来设置它们。注意一些打包工具例如 <code>webpack</code> 和 <code>vite</code> 将会自动识别这些导出条件，而 Rollup 也可以通过<a href="https://github.com/rollup/plugins/tree/master/packages/node-resolve/#exportconditions" target="_blank" rel="noreferrer">配置</a>来识别它们，你需要提醒开发者在他们自己打包工具的配置中去做这些事。</p></details><h3 id="列出要发布的-files" tabindex="-1">列出要发布的 <code>files</code> <a class="header-anchor" href="#列出要发布的-files" aria-label="Permalink to &quot;列出要发布的 \`files\`&quot;">​</a></h3><details><summary><code>files</code> 定义你的 NPM 包中要包含哪些文件</summary><p><a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#files" target="_blank" rel="noreferrer"><code>files</code></a> 决定 <code>npm</code> CLI 在打包库时哪些文件和目录包含到最终的 NPM 包中。</p><p>例如，如果你将代码从 TypeScript 编译为 JavaScript，你可能就不想在 NPM 包中包含 TypeScript 的源代码。（相反，你应该包含 <a href="#创建-sourcemap">sourcemap</a>）。</p><p><code>files</code> 可以接受一个字符串数组（如果需要，这些字符串可以包含类似 glob 的语法），例如：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意，文件数组不接受相对路径表示；<code>&quot;files&quot;: [&quot;./dist&quot;]</code> 将无法正常工作。</p><p>验证你已正确设置 <code>files</code> 的一种好方法是运行 <a href="https://docs.npmjs.com/cli/v8/commands/npm-publish#dry-run" target="_blank" rel="noreferrer"><code>npm publish --dry-run</code></a>，它将根据此设置列出将会包含的文件。</p></details><h3 id="为你的-js-文件设置默认的模块-type" tabindex="-1">为你的 JS 文件设置默认的模块 <code>type</code> <a class="header-anchor" href="#为你的-js-文件设置默认的模块-type" aria-label="Permalink to &quot;为你的 JS 文件设置默认的模块 \`type\`&quot;">​</a></h3><details><summary><code>type</code> 规定你的 <code>.js</code> 文件使用哪个模块系统</summary><p>运行时和打包工具需要一种方法来确定你的 <code>.js</code> 文件采用哪种模块系统 —— ESM 还是 CommonJS。因为 CommonJS 首先出现，所以它被打包工具视为默认的 - 但你可以通过在你的 <code>package.json</code> 中添加 <code>&quot;type&quot;</code> 来控制这种行为。</p><p>你可以选择 <code>&quot;type&quot;:&quot;module&quot;</code> 或 <code>&quot;type&quot;:&quot;commonjs&quot;</code>，也可以不添加该字段（默认为 CommonJS），但仍强烈建议你进行设置，显式地声明你正在使用哪一个。</p><p>请注意，你可以通过几个技巧在项目中混用模块类型：</p><ul><li><code>.mjs</code> 文件总是 ESM 模块，即使你的 <code>package.json</code> 有 <code>&quot;type&quot;: &quot;commonjs&quot;</code>（或者没有 <code>type</code>）</li><li><code>.cjs</code> 文件总是 CommonJS 模块，即使你的 <code>package.json</code> 有 <code>&quot;type&quot;: &quot;module&quot;</code></li><li>你可以在子目录下添加其他 <code>package.json</code> 文件；运行时和打包工具将向上遍历文件目录，直到寻找到最近的 <code>package.json</code>。这意味着你可以有两个不同的文件夹，都使用 <code>.js</code> 文件，但每个文件夹都有自己的 <code>package.json</code> 并设置为不同的 <code>type</code> 以获得基于 CommonJS 和 ESM 的文件夹。</li></ul><p>参考优秀的 NodeJS 文档 <a href="https://nodejs.org/docs/latest-v18.x/api/packages.html#determining-module-system" target="_blank" rel="noreferrer">这里</a> 和 <a href="https://nodejs.org/docs/latest-v18.x/api/packages.html#packagejson-and-file-extensions" target="_blank" rel="noreferrer">这里</a> 了解更多信息。</p></details><h3 id="列出哪些模块有-sideeffects" tabindex="-1">列出哪些模块有 <code>sideEffects</code> <a class="header-anchor" href="#列出哪些模块有-sideeffects" aria-label="Permalink to &quot;列出哪些模块有 \`sideEffects\`&quot;">​</a></h3><details><summary>设置 <code>sideEffects</code> 来允许 treeshaking </summary><p>创建一个“纯模块”带来的优点与创建一个<a href="https://en.wikipedia.org/wiki/Pure_function" target="_blank" rel="noreferrer">纯函数</a>十分类似；打包工具能够对你的库更好的进行 treeshaking。</p><p>通过设置 <code>sideEffects</code> 让打包工具知道你的模块是否是“纯”的。不设置这个字段，打包工具将不得不假设你<strong>所有</strong>的模块都是有副作用。</p><p><code>sideEffects</code> 可以设为 <code>false</code>，表示没有任何模块具有副作用，也可以设置为字符串数组来列出哪些文件具有副作用。例如：</p><div class="language-jsonc line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 所有模块都是“纯”的</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">sideEffects</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>或</p><div class="language-jsonc line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 除了 &quot;module.js&quot;，所有模块都是“纯”的</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">sideEffects</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>所以，什么让一个模块具有副作用？例如修改一个全局变量，发送 API 请求，或导出 CSS，而且开发人员不需要做任何事情这些动作就会被执行。例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 具有副作用的模块</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myVar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">example </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">testing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>导入 <code>myVar</code> 时，你的模块自动设置 <code>window.example</code>。</p><p>例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myVar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">library</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">example)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 打印 &quot;testing&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在某些情况下，如 polyfill，这种行为是有意的。然而，如果我们想让这个模块是“纯”的，我们可以将对 <code>window.example</code> 的赋值移动到一个函数中。例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 一个“纯”模块</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myVar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setExample</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">example</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">testing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>现在这是一个“纯”模块。注意，从开发者的角度来看会有不同：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myVar</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setExample</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">library</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">example)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 打印 &quot;undefined&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setExample</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">example)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 打印 &quot;testing&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过<a href="https://webpack.js.org/guides/tree-shaking/#mark-the-file-as-side-effect-free" target="_blank" rel="noreferrer">这篇文章</a>来了解更多。</p></details><h3 id="设置-main-字段" tabindex="-1">设置 <code>main</code> 字段 <a class="header-anchor" href="#设置-main-字段" aria-label="Permalink to &quot;设置 \`main\` 字段&quot;">​</a></h3><details><summary><code>main</code> 定义 CommonJS 入口 </summary><p><code>main</code> 是一个当打包工具或运行时不支持 <a href="#定义你的-exports"><code>package.json#exports</code></a> 时的兜底方案；如果打包工具或运行时支持 package exports，则不会使用 <code>main</code>。</p><p><code>main</code> 应该指向一个兼容 CommonJS 格式的产出；它应该与 package exports 中的 <code>require</code> 保持一致。</p></details><h3 id="设置-module-字段" tabindex="-1">设置 <code>module</code> 字段 <a class="header-anchor" href="#设置-module-字段" aria-label="Permalink to &quot;设置 \`module\` 字段&quot;">​</a></h3><details><summary><code>module</code> 定义 ESM 入口</summary><p><code>module</code> 是一个当打包工具或运行时不支持 <a href="#定义你的-exports"><code>package.json#exports</code></a> 时的兜底方案；如果打包工具或运行时支持 package exports，则不会使用 <code>module</code>。</p><p><code>module</code> 应该指向一个兼容 ESM 格式的产出；它应该与 package exports 中的 <code>module</code> 或 <code>import</code> 保持一致。</p></details><h3 id="设置给-cdn-使用的附加字段" tabindex="-1">设置给 CDN 使用的附加字段 <a class="header-anchor" href="#设置给-cdn-使用的附加字段" aria-label="Permalink to &quot;设置给 CDN 使用的附加字段&quot;">​</a></h3><details><summary>支持 CDN，例如 <code>unpkg</code> 和 <code>jsdelivr</code></summary><p>为让你的库在 CDN 上“以默认的方式正常工作”，如 <a href="https://unpkg.com" target="_blank" rel="noreferrer">unpkg</a> 和 <a href="https://www.jsdelivr.com" target="_blank" rel="noreferrer">jsdelivr</a>，你可以设置它们的特定字段指向你的 <code>umd</code> 产出。例如：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">unpkg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/index.umd.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">jsdelivr</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/index.umd.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></details><h3 id="设置-browser-字段" tabindex="-1">设置 <code>browser</code> 字段 <a class="header-anchor" href="#设置-browser-字段" aria-label="Permalink to &quot;设置 \`browser\` 字段&quot;">​</a></h3><details><summary><code>browser</code> 指向能在浏览器中工作的产出</summary><p><code>browser</code> 是一个当打包工具或运行时不支持 <a href="#定义你的-exports"><code>package.json#exports</code></a> 时的兜底方案；如果打包工具或运行时支持 package exports， 则不会使用 <code>browser</code>。</p><p><code>browser</code> 应该指向能在浏览器中工作的 <code>esm</code> 产出。但是，只有在为浏览器和服务器（等其他非浏览器环境）创建不同的产出时，才需要设置该字段。如果你没有为多个环境创建多个产出，或者你的产出是“纯 JavaScript”或“通用”的，可以在任何 JavaScript 环境中运行，那么你就不需要设置 <code>browser</code> 字段。</p><p>如果你确实需要设置该字段，这里有一个<a href="https://github.com/defunctzombie/package-browser-field-spec" target="_blank" rel="noreferrer">优秀的指南</a>，介绍了配置它的不同方法。</p><p>注意，<code>browser</code> 字段不应该指向 <code>umd</code> 产出，因为那样的话，你的库就不会被打包工具（如 Webpack）进行 treeshaking，这些打包工具会优先考虑这个字段，而不是其他字段，比如 <a href="#设置-module-字段">module</a> 和 <a href="#设置-main-字段">main</a>。</p></details><h3 id="设置-types-字段" tabindex="-1">设置 <code>types</code> 字段 <a class="header-anchor" href="#设置-types-字段" aria-label="Permalink to &quot;设置 \`types\` 字段&quot;">​</a></h3><details><summary><code>types</code> 定义 TypeScript 类型 </summary><p><code>types</code> 是一个当打包工具或运行时不支持 <a href="#定义你的-exports"><code>package.json#exports</code></a> 时的兜底方案； 如果打包工具或运行时支持 package exports，则不会使用 <code>types</code>。</p><p><code>types</code> 应该指向你的 TypeScript 入口文件，例如 <code>index.d.ts</code>；它应该与 package exports 中的 <code>types</code> 字段指向同一个文件。</p></details><h3 id="列出-peerdependencies" tabindex="-1">列出 <code>peerDependencies</code> <a class="header-anchor" href="#列出-peerdependencies" aria-label="Permalink to &quot;列出 \`peerDependencies\`&quot;">​</a></h3><details><summary>如果你依赖别的框架或库，将它设置为 peer dependency</summary><p>你应该<a href="#外置框架">外置框架</a>。然而，这样做后，你的库只有在开发人员自行安装你需要的框架后才能工作。设置 <code>peerDependencies</code> 让他们知道他们需要安装的框架。- 例如，如果你在创建一个 React 库：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">peerDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^18.2.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">react-dom</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^18.2.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>通过<a href="https://nodejs.org/en/blog/npm/peer-dependencies/" target="_blank" rel="noreferrer">这篇文章</a>来了解更多。</p><p>你应该以书面形式来体现这些依赖；例如，<code>npm v3-v6</code> 不安装 peer dependencies，而 <code>npm v7+</code> 将自动安装 peer dependencies。</p></details><h3 id="说明你的库使用哪个许可证" tabindex="-1">说明你的库使用哪个<code>许可证</code> <a class="header-anchor" href="#说明你的库使用哪个许可证" aria-label="Permalink to &quot;说明你的库使用哪个\`许可证\`&quot;">​</a></h3><details><summary>保护你自己和其他的贡献者</summary><blockquote><p>开源许可证用于保护贡献者和用户。没有这种保护，企业和有经验的开发者不会使用该项目。</p></blockquote><p>上述引用自 <a href="https://choosealicense.com/" target="_blank" rel="noreferrer">Choose a License</a>，这也是一篇很好的文章，帮助你来决定哪个许可证适合你的项目。</p><p>当你决定了许可证，<a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#license" target="_blank" rel="noreferrer">关于许可证的 npm 文档</a>中描述了许可证字段的格式。例如：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">license</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MIT</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>除此之外，你可以在项目的根目录下创建一个 <code>LICENSE.txt</code> 文件，并将许可证的文本复制到这里。</p></details><h2 id="致谢" tabindex="-1">致谢 <a class="header-anchor" href="#致谢" aria-label="Permalink to &quot;致谢&quot;">​</a></h2><p>十分感谢抽出时间对这个文档的初稿进行审查并给出修改意见的人（按姓氏排序)：</p><ul><li>Joel Denning @joeldenning</li><li>Fran Dios @frandiox</li><li>Kent C. Dodds @kentcdodds</li><li>Carlos Filoteo @filoxo</li><li>Jason Miller @developit</li><li>Konnor Rogers @paramagicdev</li><li>Matt Seccafien @cartogram</li><li>Nate Silva @natessilva</li><li>Cong-Cong Pan @SyMind</li></ul><hr><blockquote><p>原文</p></blockquote><p><a href="https://github.com/frehner/modern-guide-to-packaging-js-library/blob/main/README-zh_CN.md" target="_blank" rel="noreferrer">https://github.com/frehner/modern-guide-to-packaging-js-library/blob/main/README-zh_CN.md</a></p>`,59),l=[p];function r(t,c,i,d,u,m){return a(),e("div",null,l)}const F=s(o,[["render",r]]);export{D as __pageData,F as default};
