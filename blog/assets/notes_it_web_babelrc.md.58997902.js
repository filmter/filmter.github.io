import{_ as e,g as a,f as l,z as b}from"./app.3ae020bb.js";const g=JSON.parse('{"title":".babelrc与babel.config.js","description":"","frontmatter":{},"headers":[{"level":2,"title":"问题背景","slug":"问题背景","link":"#问题背景","children":[]},{"level":2,"title":"babel.config.js与.babelrc区别","slug":"babel-config-js与-babelrc区别","link":"#babel-config-js与-babelrc区别","children":[]},{"level":2,"title":"解决","slug":"解决","link":"#解决","children":[]}],"relativePath":"notes/it/web/babelrc.md","lastUpdated":1679024374000}'),o={name:"notes/it/web/babelrc.md"},c=b('<h1 id="babelrc与babel-config-js" tabindex="-1">.babelrc与babel.config.js <a class="header-anchor" href="#babelrc与babel-config-js" aria-hidden="true">#</a></h1><h2 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-hidden="true">#</a></h2><p>在开发组件库 <code>EJ/UI</code> 时，使用的技术栈：Typescript、Vue3、Storybook。</p><p>因为在开发某些组件时（Table、TableColumn）需要用到 <code>jsx</code> 语法。所以需要安装Vue官方开发的babel plugin：<code>@vue/babel-plugin-jsx</code>。</p><p>于是在项目的 <code>/.storybook</code> 的路径下创建了 <code>.babelrc</code> 文件用于配置添加的babel plugin，这时候出现了第一个奇怪的问题：</p><ol><li>在项目编译时??和?.等可选符编译报错，因此为了解决该问题，我不得不手动配置上 <code>@babel/plugin-proposal-optional-chaining</code> 和 <code>@babel/plugin-proposal-nullish-coalescing-operator</code> 插件。然而在未配置此文件之前是不报此错误的，因为typescript已经为我们做好了可选符的编译配置，这时候我们可以合理怀疑，是配置的.babelrc文件冲掉了原有的配置。</li><li>遇到的第二个问题是，在编译在/src/utils路径下的Typescript写的ES6代码时，没有把ES6代码转义成ES5，因此造成webpack报错。这时候我们更加可以验证，由于对.babelrc文件的配置冲刷掉原有的babel配置了。</li></ol><h2 id="babel-config-js与-babelrc区别" tabindex="-1">babel.config.js与.babelrc区别 <a class="header-anchor" href="#babel-config-js与-babelrc区别" aria-hidden="true">#</a></h2><p>通过<a href="https://babeljs.io/docs/en/config-files#root-babelconfigjson-file" target="_blank" rel="noreferrer">babel官方文档</a>我们可以看到，对于babel.config.js与.babelrc区别的描写，我们可以理解为：</p><ol><li>babel.config.js进行的配置是对于该项目下所有文件生效（报错node_modules）。</li><li>.babelrc进行配置仅对.babelrc所在目录下的文件有效，且会以.babelrc的配置为主，忽略掉babel.config.js。</li></ol><h2 id="解决" tabindex="-1">解决 <a class="header-anchor" href="#解决" aria-hidden="true">#</a></h2><p>知道了原因，我们就很好解决了。</p><p>正是由于 <code>/.storybook/.babelrc</code> 冲掉了项目的默认babel配置，才造成的无法正确编译。我们只需要把对babel的配置文件由 <code>/.storybook/.babelrc</code> 换到 <code>/babel.config.js</code> 即可。</p>',12),r=[c];function i(n,s,t,d,p,h){return l(),a("div",null,r)}const _=e(o,[["render",i]]);export{g as __pageData,_ as default};
