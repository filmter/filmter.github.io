import{_ as e,g as a,f as o,z as c}from"./app.76c01c89.js";const u=JSON.parse('{"title":"npm包中的alias配置","description":"","frontmatter":{},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"解决","slug":"解决","link":"#解决","children":[]}],"relativePath":"notes/it/web/如何命名一个alias.md","lastUpdated":1679301178000}'),t={name:"notes/it/web/如何命名一个alias.md"},s=c('<h1 id="npm包中的alias配置" tabindex="-1">npm包中的alias配置 <a class="header-anchor" href="#npm包中的alias配置" aria-hidden="true">#</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-hidden="true">#</a></h2><p>在实际开发中，为了避免输入很多类似 <code>../../../core/**.ts</code> 路径的问题，我们会给 <code>path</code> 设置一个别名(alias)。</p><p>我们经常使用类似于：</p><ul><li><code>@/</code>: <code>src/</code></li><li><code>@components/</code>: <code>src/components</code></li><li><code>~/</code>: <code>src/</code></li><li><code>~~/</code>: <code>/</code></li></ul><p>来指向一些常用路径。</p><p>在单一的项目中，这是完全没问题的（即使是依赖了很多 <code>npm包</code> 的项目，因为相信正常的npm包都是经过编译的，此时的别名已经不复存在）。</p><p>但在使用了类似于 <code>git submodules</code> 的项目中，<code>workspaces</code> 模块如果使用了别名，读取的是主项目的alias配置，因此导致无法正确的匹配文件路径。</p><h2 id="解决" tabindex="-1">解决 <a class="header-anchor" href="#解决" aria-hidden="true">#</a></h2><p>知道了问题就很好解决了，我们可以参考 <a href="https://github.com/element-plus/element-plus/blob/dev/tsconfig.base.json" target="_blank" rel="noreferrer">element-plus</a> 的配置。</p><p>设置一个与该<strong>项目npm包名相同的别名</strong>，这样无论是在本项目中，还是作为 <code>workspaces</code> 使用，都能够正确的引用了！</p>',11),d=[s];function l(n,i,r,p,_,h){return o(),a("div",null,d)}const f=e(t,[["render",l]]);export{u as __pageData,f as default};
