import{ac as e,h as i,f as s,aC as a}from"./chunks/framework.DoD2GAWc.js";const _=JSON.parse('{"title":"JS中的内存占用","description":"","frontmatter":{},"headers":[],"relativePath":"notes/it/web/Optimization/JS中的内存占用.md","filePath":"notes/it/web/Optimization/JS中的内存占用.md","lastUpdated":1715213753000}'),o={name:"notes/it/web/Optimization/JS中的内存占用.md"},d=a(`<h1 id="js中的内存占用" tabindex="-1">JS中的内存占用 <a class="header-anchor" href="#js中的内存占用" aria-label="Permalink to &quot;JS中的内存占用&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>思考下面的 <code>r1</code> 和 <code>r2</code> 谁占用的内存更多？</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> r1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [o]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> r2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [o.id]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>很明显，<code>r1</code> 的写法更加占用内存。</p><p>但如果现在 <code>o</code> 被其它地方引用而导致它会一直存储于内存中呢？这种情况下是 <code>r1</code> 还是 <code>r2</code>？</p><h2 id="js不同类型的内存占用" tabindex="-1">JS不同类型的内存占用 <a class="header-anchor" href="#js不同类型的内存占用" aria-label="Permalink to &quot;JS不同类型的内存占用&quot;">​</a></h2><p>在 JavaScript 中，不同数据类型所占用的字节数是不同的，具体如下：</p><ol><li>基本类型数据：</li></ol><ul><li><code>Undefined</code> 和 <code>Null</code> 类型分别占用 <code>4</code> 个字节的内存空间。</li><li><code>Boolean</code> 类型占用 <code>4</code> 个字节的内存空间。</li><li><code>Number</code> 类型占用 <code>8</code> 个字节的内存空间，即 64 位。</li><li><code>String</code> 类型占用的内存空间是可变的，它取决于字符串的长度和字符编码方式，例如 <code>UTF-8</code> 或 <code>UTF-16</code>。<code>UTF-8</code> 编码的字符串通常占用 <code>1</code> 到 <code>4</code> 个字节，<code>UTF-16</code> 编码的字符串通常占用 <code>2</code> 个字节。</li></ul><ol><li>复合数据类型：</li></ol><ul><li><code>Object</code> 类型是复合类型数据，它占用的内存空间大小是不固定的，它包含了一组属性和方法，每个属性和方法的大小也是不固定的。</li><li><code>Array</code> 类型是 Object 的一种特殊形式，它占用的内存空间大小也是不固定的，它包含了一组元素，每个元素的大小也是不固定的。</li><li><code>对象的引用</code> 通常是一个指向该对象存储位置的指针或地址，这个 <code>指针</code> 或地址的大小是固定的，通常是 <code>4</code> 或 <code>8</code> 个字节，与该对象的大小无关。</li></ul><p>需要注意的是，基本类型的数据都是固定的，它们占用的内存空间也是固定的，而不受具体值的大小或范围的影响。例如，一个数值类型的变量无论存储的值是 1 还是 1000000，它都会占用同样的内存空间，即 8 个字节。</p><p>JavaScript 中的内存管理是由垃圾回收器自动管理的，它会自动回收不再使用的内存空间。因此，在编写 JavaScript 程序时，我们通常不需要过分关注内存占用问题，而应该更加关注代码的可读性、可维护性和性能等方面的问题。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>知道了不同类型的内存占用就很容易得出结论了：</p><ul><li>当 <code>o</code> 始终存在于内存中时：<code>指针: 8字节</code> = <code>Number: 8字节</code>，因此它们占用相同的内存空间。</li></ul>`,17),l=[d];function t(n,c,p,r,h,k){return s(),i("div",null,l)}const b=e(o,[["render",t]]);export{_ as __pageData,b as default};
