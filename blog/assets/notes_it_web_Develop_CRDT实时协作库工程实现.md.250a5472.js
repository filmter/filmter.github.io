import{_ as s,c as n,o as a,V as l}from"./chunks/framework.c277a2d0.js";const p="/blog/assets/1.1f30e2c0.webp",e="/blog/assets/2.9687f29f.webp",o="/blog/assets/3.e238618d.webp",t="/blog/assets/4.4b65b0f1.webp",u=JSON.parse('{"title":"前端CRDT实时协作库 Yjs 工程实现","description":"","frontmatter":{},"headers":[],"relativePath":"notes/it/web/Develop/CRDT实时协作库工程实现.md","filePath":"notes/it/web/Develop/CRDT实时协作库工程实现.md","lastUpdated":1688571308000}'),r={name:"notes/it/web/Develop/CRDT实时协作库工程实现.md"},c=l('<h1 id="前端crdt实时协作库-yjs-工程实现" tabindex="-1">前端CRDT实时协作库 Yjs 工程实现 <a class="header-anchor" href="#前端crdt实时协作库-yjs-工程实现" aria-label="Permalink to &quot;前端CRDT实时协作库 Yjs 工程实现&quot;">​</a></h1><p>作为近年来分布式系统领域算法研究的新成果，CRDT 基础库为前端应用带来了奇妙的可能性：<strong>只需要一个 API 与 backbone 几乎一样简单的 model 层，你的应用就能自然地获得对多人协作场景下并发更新的支持</strong>。这背后隐藏着怎样的黑魔法呢？本文希望以当下代表前端 CRDT 库性能巅峰的 <a href="https://github.com/yjs/yjs" target="_blank" rel="noreferrer">Yjs</a> 为例，向大家直观地展示 <em>how CRDT works</em>。</p><p><img src="'+p+`" alt="" data-fancybox="gallery"></p><p>Yjs 和其他前端主流 CRDT 库的性能对比，Yjs 对应底部的蓝线。</p><p>本文会从 Yjs 的工程实现出发，介绍一个典型的工业级 CRDT 库是如何实现以下能力的：</p><ul><li>建模数据结构</li><li>解决并发冲突</li><li>回溯历史记录</li><li>同步网络状态</li></ul><p>作为一份科普性的介绍，本文不会动辄甩出大段晦涩的源码，也不会涉及多少抽象的数学知识。阅读时只需了解数据结构方面的计算机基础即可。</p><p>在实际介绍 Yjs 内部概念前，我们该如何直观地了解 CRDT 库的使用方式呢？Yjs 对使用者提供了如 <a href="https://docs.yjs.dev/api/shared-types/y.text" target="_blank" rel="noreferrer">YText</a>、<a href="https://docs.yjs.dev/api/shared-types/y.array" target="_blank" rel="noreferrer">YArray</a> 和 <a href="https://docs.yjs.dev/api/shared-types/y.map" target="_blank" rel="noreferrer">YMap</a> 等常用数据类型（即所谓的 <a href="https://docs.yjs.dev/getting-started/working-with-shared-types" target="_blank" rel="noreferrer">Shared Types</a>，这里把它们统称为 YModel），可以直接作为应用的 model 层使用：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> Y </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">yjs</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 应用中的全部协作状态均可在单个 YDoc 容器中承载</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将该实例传入 WebSocket 等协议的 provider 后即可支持网络同步</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> doc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Doc</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在 YDoc 上可以创建不同类型的顶层 YModel 实例</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里创建了一个顶层名为 root 的 YMap</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> yRoot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> doc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMap</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 也可以用 class 构造器来实例化独立的 YMap 等 YModel</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可直接用 get set delete 等常见 API 对 YModel 增删改查</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> yPoint </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">yPoint</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">yPoint</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// YMap 的值也可以是 YMap，从而构造出嵌套的数据类型</span></span>
<span class="line"><span style="color:#A6ACCD;">yRoot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">point</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> yPoint)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// YMap 中还可以存入 YText 等其他 YModel，形成复合的数据类型</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> yName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Text</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">yName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Wilson Edwards</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">yRoot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> yName)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>这套 API 表面看起来平淡无奇，但它真正的强大之处在于 Conflict-free，亦即对上层而言，<strong>并发更新时潜在的状态冲突已经被 Yjs 自动解决了</strong>：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 可以用 2 份独立的 YDoc 实例来模拟 2 个客户端</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> doc1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Doc</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> doc2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Doc</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> yText1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> doc1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getText</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> yText2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> doc2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getText</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在某份 YDoc 更新时，应用二进制的 update 数据到另一份 YDoc 上</span></span>
<span class="line"><span style="color:#A6ACCD;">doc1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">update</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">update</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> Y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">applyUpdate</span><span style="color:#A6ACCD;">(doc2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> update))</span></span>
<span class="line"><span style="color:#A6ACCD;">doc2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">update</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">update</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> Y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">applyUpdate</span><span style="color:#A6ACCD;">(doc1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> update))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 制造两次存在潜在冲突的更新</span></span>
<span class="line"><span style="color:#A6ACCD;">yText1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Edwards</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">yText2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Wilson</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// CRDT 算法可保证两份客户端中的状态始终一致</span></span>
<span class="line"><span style="color:#A6ACCD;">yText1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toJSON</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// WilsonEdwards</span></span>
<span class="line"><span style="color:#A6ACCD;">yText2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toJSON</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// WilsonEdwards</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>透过这些 Yjs 表层 API 的例子，我们应该已经可以认识到 CRDT 的威力所在了。下面真正有趣的问题来了：<strong>Yjs 内部是如何实现这一能力的呢？</strong></p><h2 id="建模数据结构" tabindex="-1">建模数据结构 <a class="header-anchor" href="#建模数据结构" aria-label="Permalink to &quot;建模数据结构&quot;">​</a></h2><p>提到「底层原理」，很多同学可能会立刻会开始想象某种精妙的冲突解决算法。但在介绍这一算法前，我们最好先熟悉一下 Yjs 在工程上建模 CRDT 时所用的基础数据结构：<a href="https://zh.wikipedia.org/wiki/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8" target="_blank" rel="noreferrer">双向链表</a>。</p><p>在 Yjs 中，不论是 YText、YArray 还是 YMap，这些 YModel 实例中的数据都存储在一条双向链表里。粗略地说，<strong>这条链表中的每一项（或者说每个 item）都唯一地记录了某次用户操作所修改的数据</strong>，某种程度上和区块链有些异曲同工。可以认为上面例子中对 YModel 的操作，最后都会转为对这条链表的 append、insert、split、merge 等结构变换。链表中每个 <a href="https://github.com/yjs/yjs/blob/main/src/structs/Item.js" target="_blank" rel="noreferrer">item</a> 会被序列化编码后分发，而基于 CRDT 算法的保证，<strong>只要每个客户端最终都能接收到全部的 item，那么不论客户端以何种顺序接收到这些 item，它们都能重建出完全一致的文档状态</strong>。</p><blockquote><p>基于上述手段实现的 CRDT 结构是 CRDT 流派中的一种，可以将其称为 <a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type#Operation-based_CRDTs" target="_blank" rel="noreferrer">基于操作的CRDT - operation-based CRDT</a>、list CRDT 或 sequence CRDT。</p></blockquote><p>显然， 在多人实时协作这种无法保证 item 接收时序的场景下，每个 item 都需要携带某种标识，供系统唯一确定其在逻辑时间轴上的位置。Yjs 会为每个 item 分配一个唯一 ID，其结构为 <code>ID(clientID, clock)</code>，如下所示：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Yjs 中的 ID 源码，这样的朴素实现有利于引擎的 hidden class 优化</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ID</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">client</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">clock</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 客户端的唯一 ID</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">client</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">client</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 逻辑时间戳</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">clock</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">clock</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这里的 clientID 和 clock 都是整数，前者用于唯一标识某个 YDoc 对应的客户端，而后者则属于一种名为 <a href="https://en.wikipedia.org/wiki/Lamport_timestamp" target="_blank" rel="noreferrer">Lamport timestamp</a> 的逻辑时间戳，可以认为这就是个从零开始递增的计数器。它的更新规则非常简单：</p><ul><li>发生本地事件时，<code>localClock += 1</code>。</li><li>在接收到远程事件时，<code>localClock = max(remoteClock, localClock) + 1</code>。</li></ul><blockquote><p>这种机制看似简单，但实际上使我们获得了数学上性质良好的<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BA%8F%E5%85%B3%E7%B3%BB" target="_blank" rel="noreferrer">全序结构</a>。这意味着只要再配合比较 clientID 的大小，即可令任意两个 item 之间均可对比获得逻辑上的先后关系，这对保证 CRDT 算法的正确性相当重要。但相关数学理论并非本文重点，在此不再展开。</p></blockquote><p>我们可以借助文本编辑的例子来理解这种 list CRDT 的工作方式。在未经任何优化的朴素情况下，<strong>这种结构要求我们把每个字符插入操作都建模为一个 item，也就是每个字符都携带了一个逻辑时间戳 ID</strong>：</p><p><img src="`+e+`" alt="" data-fancybox="gallery"></p><p>在上面的例子中，<code>Y A T A !</code> 这几个字符每个都对应一个 item（或者说一次字符插入的 operation）。它们通过 <code>left</code> 和 <code>right</code> 字段连接在一起。在插入新字符 <code>T</code> 的时候，Yjs 就会根据 item 的 ID 在链表中查找合适的插入位置，将新字符对应的 item 接入链表中。另外同个用户持续追加的文字也会被合并成 <code>length</code> 很长的单个 item，避免大量碎片化对象的性能问题。</p><p>注意，在文档的高频增删过程中，并不是所有 item 都会持续存在于链表中。但由于 CRDT 的冲突解决需要依赖历史 item 的元数据，<strong>我们并不能直接将历史上的 item 硬删除，至多只能移除掉该 item 对应的 YModel 内容</strong>（为此 Yjs 特别设计了 <a href="https://github.com/yjs/yjs/blob/main/src/structs/GC.js" target="_blank" rel="noreferrer">GC</a> 对象来将废弃的 YModel 替换为空结构，相当于一种墓碑机制）。这就带来了下一个问题：<strong>该使用怎样的数据结构来存储文档内所有的 item 呢？</strong></p><p>由于任意 item 均可用 ID 来排序，因此一种选择是使用 B 树这样具备对数级优良插入和删除时间复杂度的数据结构，将所有的 item 维护在一棵平衡二叉树中。但实践中 Yjs 选择了一种更简单直接的方案，<strong>即为每个 client 分配一个扁平的 item 数组</strong>，相应的结构被称为 <a href="https://github.com/yjs/yjs/blob/main/src/utils/StructStore.js" target="_blank" rel="noreferrer">StructStore</a>：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 实践中可以用 doc.store.clients.get(doc.clientID) 查看</span></span>
<span class="line"><span style="color:#A6ACCD;">doc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clients: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">114514</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [Item</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Item</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Item]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">1919810</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [Item</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Item</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Item] </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上面的结构中，每个 item 数组都是按 clock 字段的值来排序的。这样只需要做一次二分查找，就能快速找到某个 ID 对应的 item。而在接收到远程 item 时，Yjs 除了将 item 插入链表，也会将它插入 StructStore 中的相应位置。</p><p>因此我们可以认为，Yjs 中存在两种索引数据的方式：</p><ul><li>依据文档结构顺序（即 document order）建模的 <strong>双向链表</strong>。</li><li>依据逻辑时序（即 insertion order）建模的 <strong>StructStore</strong>。</li></ul><p>理解这个心智模型，会很有利于我们调试 Yjs 的内部状态。比如下面的代码就会产生 3 个 item：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> yPoint </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">yRoot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> yPoint) </span><span style="color:#676E95;font-style:italic;">// item 1</span></span>
<span class="line"><span style="color:#A6ACCD;">yPoint</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// item 2</span></span>
<span class="line"><span style="color:#A6ACCD;">yPoint</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// item 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意 item 相当于一个携带 <code>left</code> / <code>right</code> / <code>ID</code> 等 CRDT 字段的容器，其中具体的 YModel（或者说 AbstractType）数据会存储在 <code>item.content</code> 字段中，另外还有 <code>parent</code> 和 <code>parentSub</code> 字段会用于辅助表达 YMap 等嵌套结构的父子关系。其整体结构如下所示：</p><p><img src="`+o+`" alt="" data-fancybox="gallery"></p><p>由于 <code>item.content</code> 也能携带任意的 YMap 等 AbstractType 数据，这样就自然地支持了数据的嵌套。基于这种链式结构，此时一份 YMap 就对应于一系列的 entry，其中每个 key 都使用逻辑时间轴上最新的数据为当前状态，而这个 key 下其他更早的状态所对应的 item 都会被标记为删除。</p><p>为了优化本地插入的速度，Yjs 还设计了额外的缓存机制。如果在文档中任意位置随机插入新字符，这时新字符对应的 item 理论上需要 O(N) 的时间复杂度才能插入链表中。但实际上，大多数插入操作都会跟随在用户最后编辑的光标位置。因此 Yjs 默认会缓存 10 个最近的插入位置供快速匹配，在内部实现中这被称为 skip list（作者认为这一缓存机制是受到了跳表的启发）或 fast search marker。</p><p>在熟悉了基本的数据结构设计后，我们就可以进一步理解 Yjs 所设计的冲突解决机制了。</p><h2 id="解决并发冲突" tabindex="-1">解决并发冲突 <a class="header-anchor" href="#解决并发冲突" aria-label="Permalink to &quot;解决并发冲突&quot;">​</a></h2><p>CRDT 库是以怎样的策略来解决冲突的呢？其实在上面出现冲突的案例中，不管 Wilson 和 Edwards 这两段文本到底该怎么排列组合，都可以认为属于一种乌龙。这时候到底什么才是「正确的」其实已经不太重要，<strong>只要保证所有接收到消息的节点都能自觉地衍生出同样的状态就足够了</strong>——这就是所谓的 convergence（最终状态一致性）概念。</p><p>Yjs 中的 item 会组成一条双向链表。但为了妥善地解决冲突，它的实现并不仅包含 <code>left</code> 和 <code>right</code> 字段，还有这两个字段：</p><ul><li><code>origin</code> 字段存储 item 在插入时的左侧节点。</li><li><code>rightOrigin</code> 字段存储 item 在插入时的右侧节点。</li></ul><p>每个 item 在插入文档时都需要执行其 <code>integrate</code> 方法，核心的冲突解决算法就在这里用到了上述这些字段，一共仅有约 20 行：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (o </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> o </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">right) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">itemsBeforeOrigin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">o</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">conflictingItems</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">o</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">compareIDs</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">origin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">client</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">client</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">o</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">conflictingItems</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">compareIDs</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">rightOrigin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rightOrigin</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">itemsBeforeOrigin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">getItem</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">doc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;">))) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">conflictingItems</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">getItem</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">doc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;">))) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">o</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">conflictingItems</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">o</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>根据 Yjs 所用 YATA 算法的论文，上述代码的核心思想是保证新潜在插入 item 的左右连线（即下图中的红线）<strong>不形成交叉</strong>：</p><p><img src="`+t+'" alt="" data-fancybox="gallery"></p><p>不过，为什么只要避免了交叉就能保证算法的正确性呢？这需要数学上的证明，在 YATA 算法的论文中有更多具体细节，对本文而言已经超纲了。</p><p>有趣的是，冲突在实际应用中其实很罕见。因此虽然上面这段代码属于 CRDT 库的算法核心，但一般却很少会执行，也可以理解为一种保证数据不会因并发更新而损坏的保障性机制。</p><h2 id="回溯历史记录" tabindex="-1">回溯历史记录 <a class="header-anchor" href="#回溯历史记录" aria-label="Permalink to &quot;回溯历史记录&quot;">​</a></h2><p>从上面的介绍中我们可以发现，实际上一份文档中所有的 item 结构都可以被持续存储下来，这显然对历史记录有很大的价值。为此 Yjs 也自带了 <a href="https://docs.yjs.dev/api/undo-manager" target="_blank" rel="noreferrer">UndoManager</a> 来提供开箱即用的历史记录管理功能。在个人之前的知乎回答中，<a href="https://www.zhihu.com/question/367915946/answer/2240528814" target="_blank" rel="noreferrer">也介绍过协作场景下历史记录模块的设计准则</a>。但这个回答中提到的思维模型主要还是利于在高层面上推演出一些产品操作所应获得的效果，而不是工程细节层面的实现。为了追求极致性能，Yjs 的实现其实还做了更多优化，这里做一个简单的总结。</p><p>在讨论 UndoManager 的实现方式前，我们需要了解 Yjs 对删除操作所做的特殊处理。在 Yjs 中，每个 item 均可以被标记为删除（可以通过 <code>item.deleted</code> 的 getter 来检查），但 item 中并没有记录关于删除操作的更多信息：</p><ul><li>在 item 中不会记录它时何时被删除，或是被哪个用户删除了。</li><li>在 StructStore 中也不会记录删除操作。</li><li>在删除发生后，本地的 clock 不会递增。</li></ul><p>那么，删除操作的信息是在哪里建模的呢？Yjs 引入了 <a href="https://github.com/yjs/yjs/blob/main/src/utils/DeleteSet.js" target="_blank" rel="noreferrer">DeleteSet</a> 的概念，可以记录逻辑时间轴上某段时间内（或者说某次 transaction 中）所有被删除的 item，这份数据也会独立于 item 分发。换句话说，<strong>Yjs 中的删除操作被设计成了独立于双向链表的结构</strong>。在前面关于 item 双向链表的介绍中，我们讨论的还是一个 operation-based CRDT。但在处理删除操作时，Yjs 的设计则相当于一种更简单的 <a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type#State-based_CRDTs" target="_blank" rel="noreferrer">基于状态的CRDT | state-based CRDT</a>。</p><blockquote><p>所谓的 state-based CRDT 会将本地状态全量发送到每一个客户端，在各个客户端独立做合并计算。对于计数器一类的轻量状态，这类 CRDT 往往有更高的实用性。可以认为 Yjs 对删除操作的建模就符合这一概念。</p></blockquote><p>在上面的介绍中我们提到了 <a href="https://github.com/yjs/yjs/blob/main/src/utils/Transaction.js" target="_blank" rel="noreferrer">transaction</a> 的概念，这是 Yjs 中用于构建事件系统的抽象。每次更新对应的 transaction 都包括两份数据：</p><ul><li>这次更新所插入的 item。</li><li>这次更新所删除 item 的 DeleteSet。</li></ul><p>在网络上实际分发的二进制增量更新数据，就是序列化编码后的 transaction。可以认为 transaction 既会用于编码更新，也是撤销重做操作对应的粒度。基于上述数据结构，可以发现只要做两件事就可以撤销掉一次 transaction：</p><ul><li>将这次 transaction 所插入的 item 标记为删除。</li><li>将这次更新所删除的 item 标记为恢复。</li></ul><p>由于这个过程并不需要新增新的 item，因此这样一来，连续的撤销重做操作在理论上就相当于只需持续分发轻量级 DeleteSet 即可。由于 DeleteSet 的结构非常轻（例如在记录了真实用户 LaTeX 论文编辑过程的 <a href="https://github.com/dmonad/crdt-benchmarks#b4-real-world-editing-dataset" target="_blank" rel="noreferrer">B4</a> benchmark 数据集中，18.2 万次插入和 7.7 万次删除后仅生成了 4.5KB 的 DeleteSet），这种设计就进一步贴近了「零开销抽象」，因为撤销重做时并没有创造出任何未知的新数据。</p><p>不过，个人认为这种设计虽然能起到更极致的优化效果，但也让维护变得更加困难了。如 UndoManager 之前一个难以修复的问题就是「连续撤销 3 次内可重做返回原始状态，4 次以上则可能丢失字段」。这一问题的根源在于当时的实现对 item 复原的逻辑有问题，可能无法连续右移找到应被恢复的正确 item 位置。虽然针对该问题个人已经提交修复 <a href="https://github.com/yjs/yjs/pull/367" target="_blank" rel="noreferrer">PR</a>，但其排查过程也有不少坎坷。如果有同学希望实现自己的试验性 CRDT 库，基于 DeleteSet 的优化应当并不属于第一个原型中就需要实现的能力。</p><h2 id="同步网络状态" tabindex="-1">同步网络状态 <a class="header-anchor" href="#同步网络状态" aria-label="Permalink to &quot;同步网络状态&quot;">​</a></h2><p>虽然 CRDT 库本身与具体的网络协议无关，但作为一整套渐进的解决方案，Yjs 也设计了配套的网络协议。这部分与 Yjs 内部实现相关的重点包括这些：</p><ul><li>整份 Yjs 文档可以被编码为 Uint8Array 形式的 update 数据，Yjs 也可以从二进制数据中反序列化出 YDoc 的对象结构。每次文档更新的 transaction 也会计算出增量的更新以供同步，其中包含 item 和 DeleteSet，如前所述。</li><li>Yjs 通过 state vector 的概念来定位逻辑时间轴，这种数据结构实际上就是一组记录了某时刻全部客户端 <code>(client, clock)</code> 的 tuple。</li></ul><p>在同步文档状态时，Yjs 划分了两个阶段：</p><ul><li>阶段一：某个客户端可以发送自己本地的 state vector，向远程客户端获取缺失的文档 update 数据。</li><li>阶段二：远程客户端可以使用各自的本地 clock 计算出该客户端所需的 item 对象，并进一步编码生成包含了所有未同步状态的最小 update 数据。</li></ul><p>理论上，我们可以为 Yjs 配套支持 WebSocket 之外的更多网络协议，当前 Yjs 也已经支持了 <a href="https://docs.dat.foundation/docs/intro" target="_blank" rel="noreferrer">Dat</a> 这样面向分布式 Web 的新协议。但与网络协议相关的内容并不在 Yjs 主仓库中，可以参见 <a href="https://github.com/yjs/y-protocols" target="_blank" rel="noreferrer">y-protocols</a> 项目。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>到此为止，我们已经介绍了 Yjs 主要的内部特点：</p><ul><li>基于双向链表和 StructStore 的基础数据结构</li><li>基于 YATA 算法的并发冲突解决机制</li><li>基于 DeleteSet 和 Transaction 机制的撤销重做</li><li>基于两阶段划分的同步机制</li></ul><p>受个人能力所限，还有许多技术细节无法在本文逐一覆盖。最后列出一些有价值的参考资料：</p><ul><li><a href="https://www.researchgate.net/publication/310212186_Near_Real-Time_Peer-to-Peer_Shared_Editing_on_Extensible_Data_Types" target="_blank" rel="noreferrer">YATA</a> 论文介绍了 Yjs 的算法设计与正确性证明。</li><li><a href="https://github.com/yjs/yjs/blob/main/INTERNALS.md" target="_blank" rel="noreferrer">Yjs Internals</a> 记录了 Yjs 的关键内部结构，其中很多内容对本文有帮助。</li><li><a href="https://blog.kevinjahns.de/are-crdts-suitable-for-shared-editing/" target="_blank" rel="noreferrer">Are CRDTs suitable for shared editing</a> 由 Yjs 作者 Kevin Jahns 介绍了他实现的若干关键优化。</li><li><a href="https://josephg.com/blog/crdts-go-brrr/" target="_blank" rel="noreferrer">5000x fater CRDTs: An Adventure in Optimization</a> 是 OT 库 ShareDB 作者 Seph Gentle 撰写的博文，深度剖析了 CRDT 工程性能改进的历程。</li><li><a href="https://www.youtube.com/watch?v=0l5XgnQ6rB4" target="_blank" rel="noreferrer">How Yjs works from the inside out</a> 是 Seph 为了解 Yjs 而邀请 Kevin 做的视频访谈，虽然很长但相当有启发。</li><li>个人的 <a href="https://github.com/d2forum/16th/blob/main/12.18/9%E3%80%8ACRDT%20%E5%AE%9E%E6%97%B6%E5%8D%8F%E4%BD%9C%E6%8A%80%E6%9C%AF%E5%9C%A8%E7%A8%BF%E5%AE%9A%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E3%80%8B%20%E9%9B%AA%E7%A2%A7.pdf" target="_blank" rel="noreferrer">D2</a> 分享介绍了 Yjs 的项目接入实践。</li></ul><p>由于 Yjs 背后 CRDT 极佳的去中心化性质，它在 Web 3.0 时代或许有机会成为某种形式的前端基础设施。从它的案例中我们可以感受到，学术研究成果的实用化并非一蹴而就，更有赖于大量具体的工程细节处理与针对性优化，这背后仍然绕不开基础的数据结构和算法等计算机基础知识。并且相对于经典的 OT，近年来 CRDT 的流行或许也属于一次潜在的范式转移（paradigm shift），这对前端开发者们意味着全新的机遇。希望本文对感兴趣的同学能有所帮助。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7049148428609126414" target="_blank" rel="noreferrer">原文：探秘前端 CRDT 实时协作库 Yjs 工程实现，作者：doodlewind</a></li><li><a href="https://blog.csdn.net/sinat_39956944/article/details/105165074" target="_blank" rel="noreferrer">基于Hidden Classes 和 Inline Caching 的JS代码细节优化</a></li></ul>',73),i=[c];function y(D,F,A,C,b,d){return a(),n("div",null,i)}const h=s(r,[["render",y]]);export{u as __pageData,h as default};
