import{_ as s,c as a,o as n,V as l}from"./chunks/framework.698e940e.js";const C=JSON.parse('{"title":"前端生产hash值","description":"","frontmatter":{},"headers":[],"relativePath":"notes/it/web/Develop/前端生称hash值.md","filePath":"notes/it/web/Develop/前端生称hash值.md","lastUpdated":1702022937000}'),o={name:"notes/it/web/Develop/前端生称hash值.md"},p=l(`<h1 id="前端生产hash值" tabindex="-1">前端生产hash值 <a class="header-anchor" href="#前端生产hash值" aria-label="Permalink to &quot;前端生产hash值&quot;">​</a></h1><h2 id="什么是hash值" tabindex="-1">什么是hash值 <a class="header-anchor" href="#什么是hash值" aria-label="Permalink to &quot;什么是hash值&quot;">​</a></h2><p>哈希函数将任意长度的数据（例如文件）作为输入，并输出固定长度的哈希值，通常为几十个字符或更短。</p><p>哈希函数的设计旨在使不同的输入生成不同的哈希值，即使输入只有微小的变化也会导致不同的哈希值。这使得哈希函数非常适合用于验证数据完整性，因为即使文件中只修改了一个字节，它的哈希值也会大不相同。</p><p>常见的哈希函数包括MD5、SHA-1、SHA-256等。这些哈希函数都有很高的安全性和可靠性，但较新的哈希函数更能抵御攻击和碰撞（如SHA-3和BLAKE2）。</p><h2 id="可以通过hash值反推数据内容吗" tabindex="-1">可以通过hash值反推数据内容吗 <a class="header-anchor" href="#可以通过hash值反推数据内容吗" aria-label="Permalink to &quot;可以通过hash值反推数据内容吗&quot;">​</a></h2><p>一般来说，哈希值是通过单向哈希函数计算得到的，这意味着无法从哈希值中恢复原始数据内容。因为哈希函数将任意长度的数据映射为固定长度的哈希值，所以可能会出现多个不同的输入具有相同的哈希值的情况，这被称为哈希碰撞。</p><p>然而，在某些特定情况下，例如使用弱哈希函数或者已知数据的范围很小，可能存在一些技术可以通过哈希值反推数据内容。但这种方法并不可靠和通用，且需要更多的信息和计算资源。</p><p>因此，哈希值主要用于验证数据完整性和识别重复数据，而不能用于还原数据内容。如果需要确保数据的隐私和安全，应该使用加密算法而不是哈希函数。</p><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><blockquote><p>实现</p></blockquote><p>在前端中，可以使用浏览器原生的 SubtleCrypto API 来计算哈希值。以下是一个使用 SubtleCrypto API 实现 SHA-256 哈希的示例代码：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">calculateHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">input</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">encoder</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">TextEncoder</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">encoder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">input</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hashBuffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">crypto</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">subtle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">digest</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">SHA-256</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hashArray</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Uint8Array</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">hashBuffer</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hashHex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hashArray</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">00</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">16</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hashHex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在这个函数中，我们使用 <code>TextEncoder</code> 将字符串编码为字节数组，然后调用 <code>crypto.subtle.digest()</code> 方法来计算哈希值（传递参数时需要指定哈希算法）。返回的结果是一个 <code>ArrayBuffer</code> 对象，我们需要使用 <code>Uint8Array</code> 类型转换成一个包含哈希值的数组，再将其转换为十六进制字符串。</p><blockquote><p>使用</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> input </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">calculateHash</span><span style="color:#A6ACCD;">(input)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">hashValue</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(hashValue))</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#A6ACCD;">(error))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,16),e=[p];function t(r,c,y,F,D,A){return n(),a("div",null,e)}const h=s(o,[["render",t]]);export{C as __pageData,h as default};
