import{_ as e,c as a,o,V as n}from"./chunks/framework.c277a2d0.js";const h=JSON.parse('{"title":"你没听说过的 debug 函数","description":"","frontmatter":{},"headers":[],"relativePath":"notes/it/web/Develop/debug.md","filePath":"notes/it/web/Develop/debug.md","lastUpdated":1689843779000}'),s={name:"notes/it/web/Develop/debug.md"},t=n(`<h1 id="你没听说过的-debug-函数" tabindex="-1">你没听说过的 debug 函数 <a class="header-anchor" href="#你没听说过的-debug-函数" aria-label="Permalink to &quot;你没听说过的 debug 函数&quot;">​</a></h1><p><strong>这回学的是真正的 debug 函数而不是 JS 的 debugger API</strong>。每个前端几乎都会 JS 的 <code>debugger</code>，但是据我观察不是每个人都用过 <code>debug</code> 和 <code>undebug</code> 函数，而这两个函数非常的强大和有用。</p><p>首先，<code>debug</code> 和 <code>undebug</code> 函数是 <code>Chrome Devtools Console</code> 的功能，非 <code>Chrome</code> 调试台的其他平台没有，比如 <code>Firefox</code> 浏览器的控制台就没有。</p><h2 id="debug-function" tabindex="-1">debug(function) <a class="header-anchor" href="#debug-function" aria-label="Permalink to &quot;debug(function)&quot;">​</a></h2><p>当用 <code>debug</code> 指定某个函数时（往往是某个事件函数），这个函数每次被调用，调试器会被调用并在Sources面板上的函数内部中断，允许单步执行代码并对其进行调试。 比如掘金某个路由可能会出现问题，这时候 <code>debug</code> 函数就大显神威了，我就可以这样调试：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">debug</span><span style="color:#A6ACCD;">(history</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pushState)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当触发这个事件就能进行 <code>debug</code> 了。</p><p>因为 <code>debug</code> 函数只能在控制台应用，所以需要自己手动选择元素，这有些例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">debug</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scroll)</span></span>
<span class="line"><span style="color:#82AAFF;">debug</span><span style="color:#A6ACCD;">($0</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onclick)</span></span>
<span class="line"><span style="color:#89DDFF;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>从使用方式上来讲 <code>debugger</code> 直接应用在代码内部，这种方式适合知道 bug 所处的位置，而 <code>debug</code> 函数是从外部往函数内插入 <code>debugger</code>，这种方式在排查一些线上 bug 尤其是不知道具体位置引发的 bug 比较有用。</p><h2 id="undebug-function" tabindex="-1">undebug(function) <a class="header-anchor" href="#undebug-function" aria-label="Permalink to &quot;undebug(function)&quot;">​</a></h2><p>顾名思义，取消被 <code>debug</code> 的函数。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://developer.chrome.com/docs/devtools/console/utilities/#debug-function" target="_blank" rel="noreferrer">debug-function</a></li><li><a href="https://developer.chrome.com/docs/devtools/console/utilities/#undebug-function" target="_blank" rel="noreferrer">undebug-function</a></li></ul><hr><h2 id="原文" tabindex="-1">原文 <a class="header-anchor" href="#原文" aria-label="Permalink to &quot;原文&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7156805056447119367" target="_blank" rel="noreferrer">你没听说过的 debug 函数</a></li></ul>`,17),l=[t];function d(c,r,u,p,i,b){return o(),a("div",null,l)}const m=e(s,[["render",d]]);export{h as __pageData,m as default};
