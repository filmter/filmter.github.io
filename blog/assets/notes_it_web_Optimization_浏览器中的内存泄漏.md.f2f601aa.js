import{_ as s,c as a,o as n,V as l}from"./chunks/framework.1532a9f2.js";const e="/blog/assets/chrome-memory.8517c8ee.png",o="/blog/assets/wry_context.f835c9b2.png",u=JSON.parse('{"title":"浏览器中的内存泄漏","description":"","frontmatter":{},"headers":[],"relativePath":"notes/it/web/Optimization/浏览器中的内存泄漏.md","filePath":"notes/it/web/Optimization/浏览器中的内存泄漏.md","lastUpdated":1687065264000}'),p={name:"notes/it/web/Optimization/浏览器中的内存泄漏.md"},t=l('<h1 id="浏览器中的内存泄漏" tabindex="-1">浏览器中的内存泄漏 <a class="header-anchor" href="#浏览器中的内存泄漏" aria-label="Permalink to &quot;浏览器中的内存泄漏&quot;">​</a></h1><h2 id="造成内存泄漏的原因分析" tabindex="-1">造成内存泄漏的原因分析 <a class="header-anchor" href="#造成内存泄漏的原因分析" aria-label="Permalink to &quot;造成内存泄漏的原因分析&quot;">​</a></h2><ul><li>全局变量</li><li>分离的DOM节点(Detached Nodes)</li><li>闭包</li><li>控制台打印信息等</li></ul><h3 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h3><p>挂载在window上的变量不会被垃圾回收机制回收</p><h3 id="分离的dom节点" tabindex="-1">分离的DOM节点 <a class="header-anchor" href="#分离的dom节点" aria-label="Permalink to &quot;分离的DOM节点&quot;">​</a></h3><p>指的是DOM树中已经移除的节点，在js中仍存在引用的情况，被称为分离的DOM节点。（在Chrome Memory中被标记为 <code>Detached nodes</code>）</p><h3 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h3><p>并不是所有的闭包都可以被称为内存泄漏，只有那些不在预期范围内的才是。</p><p>PS：现代浏览器的实现机制是，如果闭包return的变量并没有被引用，那么还是会在下次垃圾回收时清理。</p><h3 id="控制台打印信息" tabindex="-1">控制台打印信息 <a class="header-anchor" href="#控制台打印信息" aria-label="Permalink to &quot;控制台打印信息&quot;">​</a></h3><p>一些变量由于始终被console引用，所以会始终在内存中。</p><h2 id="使用chrome-memory分析泄漏原因" tabindex="-1">使用Chrome Memory分析泄漏原因 <a class="header-anchor" href="#使用chrome-memory分析泄漏原因" aria-label="Permalink to &quot;使用Chrome Memory分析泄漏原因&quot;">​</a></h2><h3 id="操作步骤" tabindex="-1">操作步骤 <a class="header-anchor" href="#操作步骤" aria-label="Permalink to &quot;操作步骤&quot;">​</a></h3><p><img src="'+e+'" alt="" data-fancybox="gallery"></p><div class="tip custom-block"><p class="custom-block-title">注意</p><ul><li><p>使用 <code>无痕模式</code> 调试，避免浏览器插件带来的影响（特别是例如vue-devtools这种插件）。</p></li><li><p>内存回收机制的触发是浏览器自动运行的。但在每次拍摄快照时，浏览器会自动强制执行一次回收机制。也可以点击Memory中的垃圾桶按钮强制回收。</p></li><li><p>分析结果中 <code>括号里的构造器</code> 是引擎实现相关的，开发者可以先忽略它们。</p></li><li><p>时间轴里留下的构造函数，都是没被垃圾回收机制回收的。（回收的不再显示）</p></li><li><p>在本地dev测试时，发现切换路由后仍然有很多变量被 <code>__VUE_HMR_RUNTIME__</code> 引用导致没被回收，这是由于dev环境被热更新serve引用，因此想要对项目的性能进行准确的分析，应当在build后测试。</p></li></ul></div><blockquote><p>Chrome Memory 中确定问题</p></blockquote><p><img src="'+o+`" alt="" data-fancybox="gallery"></p><p>从截图里可以看到所有 <code>Object</code> 的缓存基本都是由于在 <code>@wry/context:Slot</code> 中引用。</p><blockquote><p>在 <code>yarn.lock</code> 中找到哪个 <code>npm</code> 包引用了 <code>@wry/context</code></p></blockquote><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@apollo/client@^3.4.17</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  dependencies:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@wry/context</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^0.7.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">optimism@^</span><span style="color:#F78C6C;">0.16</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  dependencies:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@wry/context</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^0.6.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>可以锁定 <code>@apollo/client@^3.4.17</code> 和 <code>optimism@^0.16.1</code> 这两个组件。</p><blockquote><p>在 <code>@apollo/client</code> 的源码中，找到对 <code>@wry/context</code> 的引用</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// apollo-client/src/cache/inmemory/reactiveVars.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dep</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">OptimisticDependencyFunction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">optimism</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Slot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@wry/context</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Contextual Slot that acquires its value when custom read functions are</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// called in Policies#readField.</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> cacheSlot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Slot</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ApolloCache</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> cacheInfoMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> WeakMap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">ApolloCache</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">any</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">vars</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Set&lt;ReactiveVar&lt;any&gt;&gt;;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">dep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> OptimisticDependencyFunction&lt;ReactiveVar&lt;any&gt;&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">&gt;()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">makeVar</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactiveVar</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cache</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cacheSlot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getValue</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">cache</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">attach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cache</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">getCacheInfo</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cache</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dep</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rv</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="开发时如何尽量避免内存泄漏" tabindex="-1">开发时如何尽量避免内存泄漏 <a class="header-anchor" href="#开发时如何尽量避免内存泄漏" aria-label="Permalink to &quot;开发时如何尽量避免内存泄漏&quot;">​</a></h2><h3 id="生产环境清除打印" tabindex="-1">生产环境清除打印 <a class="header-anchor" href="#生产环境清除打印" aria-label="Permalink to &quot;生产环境清除打印&quot;">​</a></h3><p>避免一些变量始终被console引用，导致无法被回收的情况。</p><h3 id="使用weakmap" tabindex="-1">使用WeakMap <a class="header-anchor" href="#使用weakmap" aria-label="Permalink to &quot;使用WeakMap&quot;">​</a></h3><p>及时清除引用非常重要。但是，你不可能记得那么多，有时候一疏忽就忘了，所以才有那么多内存泄漏。</p><p>最好能有一种方法，在新建引用的时候就声明，哪些引用必须手动清除，哪些引用可以忽略不计，当其他引用消失以后，垃圾回收机制就可以释放内存。这样就能大大减轻程序员的负担，你只要清除主要引用就可以了。</p><p><code>ES6</code> 考虑到了这一点，推出了两种新的数据结构：<code>WeakSet</code> 和 <code>WeakMap</code>。它们对于键的引用都是不计入垃圾回收机制的，所以名字里面才会有一个&quot;Weak&quot;，表示这是弱引用。</p><p>需要注意的是：WeakMap的弱引用仅限于键，值的引用仍然是强引用。</p><p>下面以 WeakMap 为例，看看它是怎么解决内存泄漏的。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(element</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">some information</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(element) </span><span style="color:#676E95;font-style:italic;">// &quot;some information&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，先新建一个 <code>Weakmap</code> 实例。然后，将一个 <code>DOM</code> 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 <code>WeakMap</code> 里面。这时，<code>WeakMap</code> 里面对element的引用就是弱引用，不会被计入垃圾回收机制。</p><p>也就是说，<code>DOM</code> 节点对象的引用计数是1，而不是2。这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。<code>Weakmap </code>保存的这个键值对，也会自动消失。</p><p>基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 <code>WeakMap</code>。</p><h2 id="vue相关issue" tabindex="-1">Vue相关Issue <a class="header-anchor" href="#vue相关issue" aria-label="Permalink to &quot;Vue相关Issue&quot;">​</a></h2><ul><li><a href="https://github.com/vuejs/core/issues/6591" target="_blank" rel="noreferrer">A memory leak occurred when switching between components #6591</a></li><li><a href="https://github.com/vuejs/core/issues/6994" target="_blank" rel="noreferrer">memory leak through nested reactivity #6994</a></li><li><a href="https://github.com/vuejs/core/issues/5363" target="_blank" rel="noreferrer">Detached nodes after unmount component(Memory leaks) #5363</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1324096" target="_blank" rel="noreferrer">chromium</a></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots/" target="_blank" rel="noreferrer">Chrome DevTools Memory Documentation</a></li><li><a href="https://ruanyifeng.com/blog/2017/04/memory-leak.html" target="_blank" rel="noreferrer">JavaScript内存泄漏 - 阮一峰</a></li><li><a href="https://793338023.github.io/2020/05/01/%E4%BD%BF%E7%94%A8chrome%E6%8E%92%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/" target="_blank" rel="noreferrer">使用chrome排查内存泄露</a></li><li><a href="https://www.bilibili.com/video/BV13y4y1H71m" target="_blank" rel="noreferrer">JavaScript内存泄漏</a></li></ul>`,41),r=[t];function c(i,y,D,F,m,C){return n(),a("div",null,r)}const A=s(p,[["render",c]]);export{u as __pageData,A as default};
